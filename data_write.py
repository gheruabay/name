import asyncio
from bleak import BleakClient, BleakScanner
import pymysql

# K·∫øt n·ªëi MySQL 
db = pymysql.connect(
    host="localhost",
    user="root",       
    password="",       
    database="test"
)
cursor = db.cursor()

buffer = ""

import asyncio
from bleak import BleakClient, BleakScanner
import pymysql

# K·∫øt n·ªëi MySQL 
db = pymysql.connect(
    host="localhost",
    user="root",       
    password="",       
    database="test"
)
cursor = db.cursor()

buffer = ""

def notification_handler(sender, data):
    global buffer
    chunk = data.decode("utf-8", errors="replace")
    buffer += chunk

    while "\n" in buffer:
        line, buffer = buffer.split("\n", 1)
        line = line.strip()
        print(f"Raw data: {line}")

        temperature = 0.0
        humidity = 0.0
        mq = 0
        dust = 0.0

        try:
            parts = line.split(",")
            for p in parts:
                kv = p.split("=")
                key = kv[0].strip()
                val = kv[1].strip()

                if key == "T":
                    temperature = float(val)
                elif key == "H":
                    humidity = float(val)
                elif key == "MQ":
                    mq = int(val)
                elif key == "Dust":
                    dust = float(val)

            # In k√®m ƒë∆°n v·ªã ra console
            print(f"Nhi·ªát ƒë·ªô: {temperature:.2f} ¬∞C | ƒê·ªô ·∫©m: {humidity:.2f} % | MQ: {mq} ppm | B·ª•i: {dust:.2f} mg/m¬≥")

            # Ch√®n v√†o b·∫£ng measurements
            sql = """
                INSERT INTO measurements (temperature, humidity, mq, dust)
                VALUES (%s, %s, %s, %s)
            """
            cursor.execute(sql, (temperature, humidity, mq, dust))
            db.commit()

            print("ƒê√£ l∆∞u v√†o MySQL!")
        except Exception as e:
            print("L∆∞u data th·∫•t ba·ªã!:", e)


# Nordic UART Service (NUS)
UART_SERVICE_UUID = "6e400001-b5a3-f393-e0a9-e50e24dcca9e"

UART_INDICATE_CHAR_UUID = "6e400002-b5a3-f393-e0a9-e50e24dcca9e"

async def main():
    print("üîç ƒêang qu√©t thi·∫øt b·ªã BLE...")
    devices = await BleakScanner.discover()
    microbit_address = None

    for d in devices:
        if d.name and "micro:bit" in d.name.lower():
            microbit_address = d.address
            print(f"‚úÖ T√¨m th·∫•y micro:bit t·∫°i {microbit_address}")
            break

    if not microbit_address:
        print("‚ùå Kh√¥ng t√¨m th·∫•y micro:bit qua BLE.")
        return

    async with BleakClient(microbit_address) as client:
        print("üîó ƒê√£ k·∫øt n·ªëi BLE v·ªõi micro:bit!")

        services = client.services
        nus_service = next((s for s in services if s.uuid == UART_SERVICE_UUID), None)
        if not nus_service:
            print("‚ö†Ô∏è Micro:bit kh√¥ng c√≥ d·ªãch v·ª• UART.")
            return

        indicate_char = next((c for c in nus_service.characteristics if c.uuid == UART_INDICATE_CHAR_UUID), None)
        if not indicate_char:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y characteristic c√≥ Indicate.")
            return

        await client.start_notify(indicate_char.uuid, notification_handler)
        print("üì° ƒêang nh·∫≠n d·ªØ li·ªáu qua Indicate... (Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng)")

        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è D·ª´ng nh·∫≠n d·ªØ li·ªáu.")
        finally:
            await client.stop_notify(indicate_char.uuid)
            cursor.close()
            db.close()

if __name__ == "__main__":
    asyncio.run(main())


# Nordic UART Service (NUS)
UART_SERVICE_UUID = "6e400001-b5a3-f393-e0a9-e50e24dcca9e"

UART_INDICATE_CHAR_UUID = "6e400002-b5a3-f393-e0a9-e50e24dcca9e"

async def main():
    print("üîç ƒêang qu√©t thi·∫øt b·ªã BLE...")
    devices = await BleakScanner.discover()
    microbit_address = None

    for d in devices:
        if d.name and "micro:bit" in d.name.lower():
            microbit_address = d.address
            print(f"‚úÖ T√¨m th·∫•y micro:bit t·∫°i {microbit_address}")
            break

    if not microbit_address:
        print("‚ùå Kh√¥ng t√¨m th·∫•y micro:bit qua BLE.")
        return

    async with BleakClient(microbit_address) as client:
        print("üîó ƒê√£ k·∫øt n·ªëi BLE v·ªõi micro:bit!")

        services = client.services
        nus_service = next((s for s in services if s.uuid == UART_SERVICE_UUID), None)
        if not nus_service:
            print("‚ö†Ô∏è Micro:bit kh√¥ng c√≥ d·ªãch v·ª• UART.")
            return

        indicate_char = next((c for c in nus_service.characteristics if c.uuid == UART_INDICATE_CHAR_UUID), None)
        if not indicate_char:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y characteristic c√≥ Indicate.")
            return

        await client.start_notify(indicate_char.uuid, notification_handler)
        print("üì° ƒêang nh·∫≠n d·ªØ li·ªáu qua Indicate... (Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng)")

        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è D·ª´ng nh·∫≠n d·ªØ li·ªáu.")
        finally:
            await client.stop_notify(indicate_char.uuid)
            cursor.close()
            db.close()

if __name__ == "__main__":
    asyncio.run(main())
